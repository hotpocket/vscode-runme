// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file service.proto (package runme.parser.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { BoolValue, Int64Value, Message, proto3, UInt32Value } from "@bufbuild/protobuf";

/**
 * @generated from enum runme.parser.v1.CellKind
 */
export enum CellKind {
  /**
   * @generated from enum value: CELL_KIND_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: CELL_KIND_MARKUP = 1;
   */
  MARKUP = 1,

  /**
   * @generated from enum value: CELL_KIND_CODE = 2;
   */
  CODE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(CellKind)
proto3.util.setEnumType(CellKind, "runme.parser.v1.CellKind", [
  { no: 0, name: "CELL_KIND_UNSPECIFIED" },
  { no: 1, name: "CELL_KIND_MARKUP" },
  { no: 2, name: "CELL_KIND_CODE" },
]);

/**
 * @generated from enum runme.parser.v1.RunmeIdentity
 */
export enum RunmeIdentity {
  /**
   * aka NONE
   *
   * @generated from enum value: RUNME_IDENTITY_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: RUNME_IDENTITY_ALL = 1;
   */
  ALL = 1,

  /**
   * @generated from enum value: RUNME_IDENTITY_DOCUMENT = 2;
   */
  DOCUMENT = 2,

  /**
   * @generated from enum value: RUNME_IDENTITY_CELL = 3;
   */
  CELL = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(RunmeIdentity)
proto3.util.setEnumType(RunmeIdentity, "runme.parser.v1.RunmeIdentity", [
  { no: 0, name: "RUNME_IDENTITY_UNSPECIFIED" },
  { no: 1, name: "RUNME_IDENTITY_ALL" },
  { no: 2, name: "RUNME_IDENTITY_DOCUMENT" },
  { no: 3, name: "RUNME_IDENTITY_CELL" },
]);

/**
 * @generated from message runme.parser.v1.Notebook
 */
export class Notebook extends Message<Notebook> {
  /**
   * @generated from field: repeated runme.parser.v1.Cell cells = 1;
   */
  cells: Cell[] = [];

  /**
   * @generated from field: map<string, string> metadata = 2;
   */
  metadata: { [key: string]: string } = {};

  /**
   * @generated from field: runme.parser.v1.Frontmatter frontmatter = 3;
   */
  frontmatter?: Frontmatter;

  constructor(data?: PartialMessage<Notebook>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "runme.parser.v1.Notebook";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cells", kind: "message", T: Cell, repeated: true },
    { no: 2, name: "metadata", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 3, name: "frontmatter", kind: "message", T: Frontmatter },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Notebook {
    return new Notebook().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Notebook {
    return new Notebook().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Notebook {
    return new Notebook().fromJsonString(jsonString, options);
  }

  static equals(a: Notebook | PlainMessage<Notebook> | undefined, b: Notebook | PlainMessage<Notebook> | undefined): boolean {
    return proto3.util.equals(Notebook, a, b);
  }
}

/**
 * @generated from message runme.parser.v1.ExecutionSummaryTiming
 */
export class ExecutionSummaryTiming extends Message<ExecutionSummaryTiming> {
  /**
   * @generated from field: google.protobuf.Int64Value start_time = 1;
   */
  startTime?: bigint;

  /**
   * @generated from field: google.protobuf.Int64Value end_time = 2;
   */
  endTime?: bigint;

  constructor(data?: PartialMessage<ExecutionSummaryTiming>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "runme.parser.v1.ExecutionSummaryTiming";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start_time", kind: "message", T: Int64Value },
    { no: 2, name: "end_time", kind: "message", T: Int64Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecutionSummaryTiming {
    return new ExecutionSummaryTiming().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecutionSummaryTiming {
    return new ExecutionSummaryTiming().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecutionSummaryTiming {
    return new ExecutionSummaryTiming().fromJsonString(jsonString, options);
  }

  static equals(a: ExecutionSummaryTiming | PlainMessage<ExecutionSummaryTiming> | undefined, b: ExecutionSummaryTiming | PlainMessage<ExecutionSummaryTiming> | undefined): boolean {
    return proto3.util.equals(ExecutionSummaryTiming, a, b);
  }
}

/**
 * @generated from message runme.parser.v1.CellOutputItem
 */
export class CellOutputItem extends Message<CellOutputItem> {
  /**
   * @generated from field: bytes data = 1;
   */
  data = new Uint8Array(0);

  /**
   * @generated from field: string type = 2;
   */
  type = "";

  /**
   * @generated from field: string mime = 3;
   */
  mime = "";

  constructor(data?: PartialMessage<CellOutputItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "runme.parser.v1.CellOutputItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "mime", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CellOutputItem {
    return new CellOutputItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CellOutputItem {
    return new CellOutputItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CellOutputItem {
    return new CellOutputItem().fromJsonString(jsonString, options);
  }

  static equals(a: CellOutputItem | PlainMessage<CellOutputItem> | undefined, b: CellOutputItem | PlainMessage<CellOutputItem> | undefined): boolean {
    return proto3.util.equals(CellOutputItem, a, b);
  }
}

/**
 * @generated from message runme.parser.v1.ProcessInfoExitReason
 */
export class ProcessInfoExitReason extends Message<ProcessInfoExitReason> {
  /**
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * @generated from field: google.protobuf.UInt32Value code = 2;
   */
  code?: number;

  constructor(data?: PartialMessage<ProcessInfoExitReason>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "runme.parser.v1.ProcessInfoExitReason";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "code", kind: "message", T: UInt32Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcessInfoExitReason {
    return new ProcessInfoExitReason().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcessInfoExitReason {
    return new ProcessInfoExitReason().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcessInfoExitReason {
    return new ProcessInfoExitReason().fromJsonString(jsonString, options);
  }

  static equals(a: ProcessInfoExitReason | PlainMessage<ProcessInfoExitReason> | undefined, b: ProcessInfoExitReason | PlainMessage<ProcessInfoExitReason> | undefined): boolean {
    return proto3.util.equals(ProcessInfoExitReason, a, b);
  }
}

/**
 * @generated from message runme.parser.v1.CellOutputProcessInfo
 */
export class CellOutputProcessInfo extends Message<CellOutputProcessInfo> {
  /**
   * @generated from field: runme.parser.v1.ProcessInfoExitReason exit_reason = 1;
   */
  exitReason?: ProcessInfoExitReason;

  /**
   * @generated from field: google.protobuf.Int64Value pid = 2;
   */
  pid?: bigint;

  constructor(data?: PartialMessage<CellOutputProcessInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "runme.parser.v1.CellOutputProcessInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "exit_reason", kind: "message", T: ProcessInfoExitReason },
    { no: 2, name: "pid", kind: "message", T: Int64Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CellOutputProcessInfo {
    return new CellOutputProcessInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CellOutputProcessInfo {
    return new CellOutputProcessInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CellOutputProcessInfo {
    return new CellOutputProcessInfo().fromJsonString(jsonString, options);
  }

  static equals(a: CellOutputProcessInfo | PlainMessage<CellOutputProcessInfo> | undefined, b: CellOutputProcessInfo | PlainMessage<CellOutputProcessInfo> | undefined): boolean {
    return proto3.util.equals(CellOutputProcessInfo, a, b);
  }
}

/**
 * @generated from message runme.parser.v1.CellOutput
 */
export class CellOutput extends Message<CellOutput> {
  /**
   * @generated from field: repeated runme.parser.v1.CellOutputItem items = 1;
   */
  items: CellOutputItem[] = [];

  /**
   * @generated from field: map<string, string> metadata = 2;
   */
  metadata: { [key: string]: string } = {};

  /**
   * @generated from field: runme.parser.v1.CellOutputProcessInfo process_info = 3;
   */
  processInfo?: CellOutputProcessInfo;

  constructor(data?: PartialMessage<CellOutput>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "runme.parser.v1.CellOutput";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: CellOutputItem, repeated: true },
    { no: 2, name: "metadata", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 3, name: "process_info", kind: "message", T: CellOutputProcessInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CellOutput {
    return new CellOutput().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CellOutput {
    return new CellOutput().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CellOutput {
    return new CellOutput().fromJsonString(jsonString, options);
  }

  static equals(a: CellOutput | PlainMessage<CellOutput> | undefined, b: CellOutput | PlainMessage<CellOutput> | undefined): boolean {
    return proto3.util.equals(CellOutput, a, b);
  }
}

/**
 * @generated from message runme.parser.v1.CellExecutionSummary
 */
export class CellExecutionSummary extends Message<CellExecutionSummary> {
  /**
   * @generated from field: google.protobuf.UInt32Value execution_order = 1;
   */
  executionOrder?: number;

  /**
   * @generated from field: google.protobuf.BoolValue success = 2;
   */
  success?: boolean;

  /**
   * @generated from field: runme.parser.v1.ExecutionSummaryTiming timing = 3;
   */
  timing?: ExecutionSummaryTiming;

  constructor(data?: PartialMessage<CellExecutionSummary>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "runme.parser.v1.CellExecutionSummary";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "execution_order", kind: "message", T: UInt32Value },
    { no: 2, name: "success", kind: "message", T: BoolValue },
    { no: 3, name: "timing", kind: "message", T: ExecutionSummaryTiming },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CellExecutionSummary {
    return new CellExecutionSummary().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CellExecutionSummary {
    return new CellExecutionSummary().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CellExecutionSummary {
    return new CellExecutionSummary().fromJsonString(jsonString, options);
  }

  static equals(a: CellExecutionSummary | PlainMessage<CellExecutionSummary> | undefined, b: CellExecutionSummary | PlainMessage<CellExecutionSummary> | undefined): boolean {
    return proto3.util.equals(CellExecutionSummary, a, b);
  }
}

/**
 * @generated from message runme.parser.v1.TextRange
 */
export class TextRange extends Message<TextRange> {
  /**
   * @generated from field: uint32 start = 1;
   */
  start = 0;

  /**
   * @generated from field: uint32 end = 2;
   */
  end = 0;

  constructor(data?: PartialMessage<TextRange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "runme.parser.v1.TextRange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "end", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TextRange {
    return new TextRange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TextRange {
    return new TextRange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TextRange {
    return new TextRange().fromJsonString(jsonString, options);
  }

  static equals(a: TextRange | PlainMessage<TextRange> | undefined, b: TextRange | PlainMessage<TextRange> | undefined): boolean {
    return proto3.util.equals(TextRange, a, b);
  }
}

/**
 * @generated from message runme.parser.v1.Cell
 */
export class Cell extends Message<Cell> {
  /**
   * @generated from field: runme.parser.v1.CellKind kind = 1;
   */
  kind = CellKind.UNSPECIFIED;

  /**
   * @generated from field: string value = 2;
   */
  value = "";

  /**
   * @generated from field: string language_id = 3;
   */
  languageId = "";

  /**
   * @generated from field: map<string, string> metadata = 4;
   */
  metadata: { [key: string]: string } = {};

  /**
   * @generated from field: runme.parser.v1.TextRange text_range = 5;
   */
  textRange?: TextRange;

  /**
   * @generated from field: repeated runme.parser.v1.CellOutput outputs = 6;
   */
  outputs: CellOutput[] = [];

  /**
   * @generated from field: runme.parser.v1.CellExecutionSummary execution_summary = 7;
   */
  executionSummary?: CellExecutionSummary;

  constructor(data?: PartialMessage<Cell>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "runme.parser.v1.Cell";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "enum", T: proto3.getEnumType(CellKind) },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "language_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "metadata", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 5, name: "text_range", kind: "message", T: TextRange },
    { no: 6, name: "outputs", kind: "message", T: CellOutput, repeated: true },
    { no: 7, name: "execution_summary", kind: "message", T: CellExecutionSummary },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Cell {
    return new Cell().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Cell {
    return new Cell().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Cell {
    return new Cell().fromJsonString(jsonString, options);
  }

  static equals(a: Cell | PlainMessage<Cell> | undefined, b: Cell | PlainMessage<Cell> | undefined): boolean {
    return proto3.util.equals(Cell, a, b);
  }
}

/**
 * @generated from message runme.parser.v1.RunmeSessionDocument
 */
export class RunmeSessionDocument extends Message<RunmeSessionDocument> {
  /**
   * @generated from field: string relative_path = 1;
   */
  relativePath = "";

  constructor(data?: PartialMessage<RunmeSessionDocument>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "runme.parser.v1.RunmeSessionDocument";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "relative_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RunmeSessionDocument {
    return new RunmeSessionDocument().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RunmeSessionDocument {
    return new RunmeSessionDocument().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RunmeSessionDocument {
    return new RunmeSessionDocument().fromJsonString(jsonString, options);
  }

  static equals(a: RunmeSessionDocument | PlainMessage<RunmeSessionDocument> | undefined, b: RunmeSessionDocument | PlainMessage<RunmeSessionDocument> | undefined): boolean {
    return proto3.util.equals(RunmeSessionDocument, a, b);
  }
}

/**
 * @generated from message runme.parser.v1.RunmeSession
 */
export class RunmeSession extends Message<RunmeSession> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: runme.parser.v1.RunmeSessionDocument document = 2;
   */
  document?: RunmeSessionDocument;

  constructor(data?: PartialMessage<RunmeSession>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "runme.parser.v1.RunmeSession";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "document", kind: "message", T: RunmeSessionDocument },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RunmeSession {
    return new RunmeSession().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RunmeSession {
    return new RunmeSession().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RunmeSession {
    return new RunmeSession().fromJsonString(jsonString, options);
  }

  static equals(a: RunmeSession | PlainMessage<RunmeSession> | undefined, b: RunmeSession | PlainMessage<RunmeSession> | undefined): boolean {
    return proto3.util.equals(RunmeSession, a, b);
  }
}

/**
 * @generated from message runme.parser.v1.FrontmatterRunme
 */
export class FrontmatterRunme extends Message<FrontmatterRunme> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string version = 2;
   */
  version = "";

  /**
   * @generated from field: runme.parser.v1.RunmeSession session = 3;
   */
  session?: RunmeSession;

  constructor(data?: PartialMessage<FrontmatterRunme>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "runme.parser.v1.FrontmatterRunme";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "session", kind: "message", T: RunmeSession },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FrontmatterRunme {
    return new FrontmatterRunme().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FrontmatterRunme {
    return new FrontmatterRunme().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FrontmatterRunme {
    return new FrontmatterRunme().fromJsonString(jsonString, options);
  }

  static equals(a: FrontmatterRunme | PlainMessage<FrontmatterRunme> | undefined, b: FrontmatterRunme | PlainMessage<FrontmatterRunme> | undefined): boolean {
    return proto3.util.equals(FrontmatterRunme, a, b);
  }
}

/**
 * @generated from message runme.parser.v1.Frontmatter
 */
export class Frontmatter extends Message<Frontmatter> {
  /**
   * @generated from field: string shell = 1;
   */
  shell = "";

  /**
   * @generated from field: string cwd = 2;
   */
  cwd = "";

  /**
   * @generated from field: bool skip_prompts = 3;
   */
  skipPrompts = false;

  /**
   * @generated from field: runme.parser.v1.FrontmatterRunme runme = 4;
   */
  runme?: FrontmatterRunme;

  /**
   * Deprecated category in favor of Tag
   *
   * @generated from field: string category = 5;
   */
  category = "";

  /**
   * @generated from field: string terminal_rows = 6;
   */
  terminalRows = "";

  /**
   * @generated from field: string tag = 7;
   */
  tag = "";

  constructor(data?: PartialMessage<Frontmatter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "runme.parser.v1.Frontmatter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "shell", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "cwd", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "skip_prompts", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "runme", kind: "message", T: FrontmatterRunme },
    { no: 5, name: "category", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "terminal_rows", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "tag", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Frontmatter {
    return new Frontmatter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Frontmatter {
    return new Frontmatter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Frontmatter {
    return new Frontmatter().fromJsonString(jsonString, options);
  }

  static equals(a: Frontmatter | PlainMessage<Frontmatter> | undefined, b: Frontmatter | PlainMessage<Frontmatter> | undefined): boolean {
    return proto3.util.equals(Frontmatter, a, b);
  }
}

/**
 * @generated from message runme.parser.v1.DeserializeRequestOptions
 */
export class DeserializeRequestOptions extends Message<DeserializeRequestOptions> {
  /**
   * @generated from field: runme.parser.v1.RunmeIdentity identity = 1;
   */
  identity = RunmeIdentity.UNSPECIFIED;

  constructor(data?: PartialMessage<DeserializeRequestOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "runme.parser.v1.DeserializeRequestOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "identity", kind: "enum", T: proto3.getEnumType(RunmeIdentity) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeserializeRequestOptions {
    return new DeserializeRequestOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeserializeRequestOptions {
    return new DeserializeRequestOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeserializeRequestOptions {
    return new DeserializeRequestOptions().fromJsonString(jsonString, options);
  }

  static equals(a: DeserializeRequestOptions | PlainMessage<DeserializeRequestOptions> | undefined, b: DeserializeRequestOptions | PlainMessage<DeserializeRequestOptions> | undefined): boolean {
    return proto3.util.equals(DeserializeRequestOptions, a, b);
  }
}

/**
 * @generated from message runme.parser.v1.DeserializeRequest
 */
export class DeserializeRequest extends Message<DeserializeRequest> {
  /**
   * @generated from field: bytes source = 1;
   */
  source = new Uint8Array(0);

  /**
   * @generated from field: runme.parser.v1.DeserializeRequestOptions options = 2;
   */
  options?: DeserializeRequestOptions;

  constructor(data?: PartialMessage<DeserializeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "runme.parser.v1.DeserializeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "source", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "options", kind: "message", T: DeserializeRequestOptions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeserializeRequest {
    return new DeserializeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeserializeRequest {
    return new DeserializeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeserializeRequest {
    return new DeserializeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeserializeRequest | PlainMessage<DeserializeRequest> | undefined, b: DeserializeRequest | PlainMessage<DeserializeRequest> | undefined): boolean {
    return proto3.util.equals(DeserializeRequest, a, b);
  }
}

/**
 * @generated from message runme.parser.v1.DeserializeResponse
 */
export class DeserializeResponse extends Message<DeserializeResponse> {
  /**
   * @generated from field: runme.parser.v1.Notebook notebook = 1;
   */
  notebook?: Notebook;

  constructor(data?: PartialMessage<DeserializeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "runme.parser.v1.DeserializeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "notebook", kind: "message", T: Notebook },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeserializeResponse {
    return new DeserializeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeserializeResponse {
    return new DeserializeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeserializeResponse {
    return new DeserializeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeserializeResponse | PlainMessage<DeserializeResponse> | undefined, b: DeserializeResponse | PlainMessage<DeserializeResponse> | undefined): boolean {
    return proto3.util.equals(DeserializeResponse, a, b);
  }
}

/**
 * @generated from message runme.parser.v1.SerializeRequestOutputOptions
 */
export class SerializeRequestOutputOptions extends Message<SerializeRequestOutputOptions> {
  /**
   * @generated from field: bool enabled = 1;
   */
  enabled = false;

  /**
   * @generated from field: bool summary = 2;
   */
  summary = false;

  constructor(data?: PartialMessage<SerializeRequestOutputOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "runme.parser.v1.SerializeRequestOutputOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "summary", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SerializeRequestOutputOptions {
    return new SerializeRequestOutputOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SerializeRequestOutputOptions {
    return new SerializeRequestOutputOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SerializeRequestOutputOptions {
    return new SerializeRequestOutputOptions().fromJsonString(jsonString, options);
  }

  static equals(a: SerializeRequestOutputOptions | PlainMessage<SerializeRequestOutputOptions> | undefined, b: SerializeRequestOutputOptions | PlainMessage<SerializeRequestOutputOptions> | undefined): boolean {
    return proto3.util.equals(SerializeRequestOutputOptions, a, b);
  }
}

/**
 * @generated from message runme.parser.v1.SerializeRequestOptions
 */
export class SerializeRequestOptions extends Message<SerializeRequestOptions> {
  /**
   * @generated from field: runme.parser.v1.SerializeRequestOutputOptions outputs = 1;
   */
  outputs?: SerializeRequestOutputOptions;

  /**
   * @generated from field: runme.parser.v1.RunmeSession session = 2;
   */
  session?: RunmeSession;

  constructor(data?: PartialMessage<SerializeRequestOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "runme.parser.v1.SerializeRequestOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "outputs", kind: "message", T: SerializeRequestOutputOptions },
    { no: 2, name: "session", kind: "message", T: RunmeSession },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SerializeRequestOptions {
    return new SerializeRequestOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SerializeRequestOptions {
    return new SerializeRequestOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SerializeRequestOptions {
    return new SerializeRequestOptions().fromJsonString(jsonString, options);
  }

  static equals(a: SerializeRequestOptions | PlainMessage<SerializeRequestOptions> | undefined, b: SerializeRequestOptions | PlainMessage<SerializeRequestOptions> | undefined): boolean {
    return proto3.util.equals(SerializeRequestOptions, a, b);
  }
}

/**
 * @generated from message runme.parser.v1.SerializeRequest
 */
export class SerializeRequest extends Message<SerializeRequest> {
  /**
   * @generated from field: runme.parser.v1.Notebook notebook = 1;
   */
  notebook?: Notebook;

  /**
   * @generated from field: runme.parser.v1.SerializeRequestOptions options = 2;
   */
  options?: SerializeRequestOptions;

  constructor(data?: PartialMessage<SerializeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "runme.parser.v1.SerializeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "notebook", kind: "message", T: Notebook },
    { no: 2, name: "options", kind: "message", T: SerializeRequestOptions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SerializeRequest {
    return new SerializeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SerializeRequest {
    return new SerializeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SerializeRequest {
    return new SerializeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SerializeRequest | PlainMessage<SerializeRequest> | undefined, b: SerializeRequest | PlainMessage<SerializeRequest> | undefined): boolean {
    return proto3.util.equals(SerializeRequest, a, b);
  }
}

/**
 * @generated from message runme.parser.v1.SerializeResponse
 */
export class SerializeResponse extends Message<SerializeResponse> {
  /**
   * @generated from field: bytes result = 1;
   */
  result = new Uint8Array(0);

  constructor(data?: PartialMessage<SerializeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "runme.parser.v1.SerializeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SerializeResponse {
    return new SerializeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SerializeResponse {
    return new SerializeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SerializeResponse {
    return new SerializeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SerializeResponse | PlainMessage<SerializeResponse> | undefined, b: SerializeResponse | PlainMessage<SerializeResponse> | undefined): boolean {
    return proto3.util.equals(SerializeResponse, a, b);
  }
}

